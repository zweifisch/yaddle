// Generated by CoffeeScript 1.9.2
(function() {
  var ParseError, keywords, parse, parseYAML, parseYaddle;

  keywords = {
    str: true,
    int: true,
    num: true
  };

  ParseError = function(message, lineno, pos) {
    return message + " at " + lineno + ":" + pos;
  };

  parseYAML = function(input) {
    var buffered, cur, curlineIndent, i, indent, indenting, j, lastlineIndent, lineno, pos, prev, ref, ret, startNewline;
    ret = {};
    indenting = false;
    indent = {
      "with": "",
      count: 0
    };
    lastlineIndent = 0;
    curlineIndent = 0;
    prev = null;
    lineno = 1;
    pos = 0;
    buffered = "";
    for (i = j = 0, ref = input.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      cur = input.charAt(i);
      if (startNewline) {
        startNewline = false;
        lastlineIndent = curlineIndent;
        indenting = false;
        buffered = "";
        lineno += 1;
        pos = 1;
      } else {
        pos += 1;
      }
      switch (cur) {
        case "\n":
          startNewline = true;
          lastlineIndent = curlineIndent;
          break;
        case " ":
          if (pos === 1) {
            if (indent["with"]) {
              if (indent["with"] !== " ") {
                throw ParseError("mixed indentation", lineno, pos);
              }
            } else {
              indent["with"] = " ";
            }
            switch (prev) {
              case null:
                throw ParseError("unexpected indentation", lineno, pos);
            }
            indenting = true;
          }
          break;
        case "\t":
          if (pos === 1) {
            if (indent["with"]) {
              if (indent["with"] !== "\t") {
                throw ParseError("mixed indentation", lineno, pos);
              }
            } else {
              indent["with"] = "\t";
            }
            switch (prev) {
              case null:
                throw ParseError("unexpected indentation", lineno, pos);
            }
            indenting = true;
          }
          break;
        case ":":
          "pass";
          break;
        case "\r":
          null;
          break;
        default:
          if (indenting) {
            indenting = false;
            if (indent.count) {
              if (buffered.length % indent.count) {
                throw ParseError("bad indentation", lineno, pos);
              }
            } else {
              indent.count = buffered.length;
            }
            curlineIndent = buffered.length / indent.count;
            buffered = "";
            if (curlineIndent > lastlineIndent + 1) {
              throw ParseError("over indented", lineno, pos);
            }
          }
      }
      buffered += cur;
      prev = cur;
    }
    return ret;
  };

  parseYaddle = function(input) {
    return input;
  };

  module.exports = {
    parse: parse = function(input) {
      return parseYaddle(parseYAML(input));
    },
    loads: function(file) {
      return new Promise(function(resolve, reject) {
        return fs.readFile(file, function(err, content) {
          if (err) {
            return reject(err);
          } else {
            return resolve(parse(content));
          }
        });
      });
    },
    ParseError: ParseError
  };

}).call(this);
